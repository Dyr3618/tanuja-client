AWSTemplateFormatVersion: '2010-09-09'
Description: EKS Cluster in Singapore Region (ap-southeast-1)

Mappings:
  ServicePrincipals:
    aws-cn:
      ec2: ec2.amazonaws.com.cn
    aws:
      ec2: ec2.amazonaws.com

Metadata:
  Author: Tanuja Padmanabhuni
  Version: 1.1
  AWS::CloudFormation::Interface:
    ParametersGroups:
      - Label:
          default: EKS Cluster
        Parameters:
          - ClusterName
          - ClusterControlPlaneSecurityGroup
      - Label:
          default: Worker Node Configuration
        Parameters:
          - NodeGroupName
          - NodeAutoScalingGroupMinSize
          - NodeAutoScalingGroupDesiredCapacity
          - NodeAutoScalingGroupMaxSize
          - NodeInstanceType
          - NodeImageIdSSMParam
          - NodeImageId
          - NodeVolumeSize
          - KeyName
          - BootstrapArguments
      - Label:
          default: Worker Node Network Configuration
        Parameters:
          - VpcId
          - Subnets
      - Label:
          default: Multus CNI Configuration
        Parameters:
          - MultusSubnets
          - MultusSecurityGroupIds
          - SriovStartDevIndex
          - SriovEndDevIndex
          - LambdaS3Bucket
          - LambdaS3Key

Parameters:
  ClusterName:
    Type: String
    Description: Name of the EKS Cluster
    Default: EKS Cluster

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: EC2 Key Pair to allow SSH access to the instances.

  NodeAutoScalingGroupDesiredCapacity:
    Type: Number
    Description: Desired number of Nodegroup ASG.
    Default: 2

  NodeAutoScalingGroupMaxSize:
    Type: Number
    Description: Maximum number of Nodegroup ASG.
    Default: 5

  NodeAutoScalingGroupMinSize:
    Type: Number
    Description: Minimum number of Nodegroup ASG.
    Default: 1

  NodeGroupName:
    Type: String
    Description: Name of the EKS Node Group
    Default: EKS-NodeGroup

  NodeImageIdSSMParam:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::ID>
    Description: SSM Parameter store path for EKS optimized AMI ID
    Default: /aws/service/eks/optimized-ami/1.30/amazon-linux-2/recommended/image-id

  NodeInstanceType:
    Type: String
    Description: Instance type for worker nodes
    Default: t3.medium

  NodeVolumeSize:
    Type: Number
    Description: Root volume size for worker nodes in GB
    Default: 100
  
  NodeImageID:
    Type: String
    Default: ''
    Description: Specify own custom image ID, which this value overrides AWS System Manager Parameter Store

  BootstrapArguments:
    Type: String
    Default: '--kubelet-extra-args ''--node-label=is_worker=true --topology-manager-policy=single-numa-node --cpu-manager-policy=static'''
    Description: check files/bootstrap.sh in https://github.com/awslabs/amazon-eks-ami

    ClusterControlPlaneSecurityGroup:
      Type: AWS::EC2::SecurityGroup::Id
      Description: Security group of control plane.
  
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC for Worker Node Instances
  
  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Subnets where workers can be created

  MultusSubnet:
    Type: List<AWS::EC2::Subnet::Id>
    Description: List of Subnet IDs for Multus CNI

  MultusSecurityGroup:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: List of Security Group IDs for Multus CNI


  SriovStartDevIndex:
    Type: Number
    Description: Starting device index for SR-IOV network interfaces
    Default: 1

  SriovEndDevIndex:
    Type: Number
    Description: Ending device index for SR-IOV network interfaces
    Default: 1

  LambdaS3Bucket:
    Type: String
    Description: S3 bucket name for Lambda function code
    Default: multuslambdaaws

  LambdaS3Key:
    Type: String
    Description: S3 key for Lambda function code
    Default: lambda_function.zip

  Conditions:
    HasNodeImageId: !Not
      - !Equals
        - !Ref NodeImageId
        - ''

Resources:

  NodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !FindInMap
                  - ServicePrincipals
                  - !Ref aWS::Partition
                  - ec2
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKSCNIPolicy
        - arn:aws:iam::aws:policy/AmazonCloudFormationFullAccess
      path: /
# Noderole for Ec2 api call

  Ec2ApiAccessPolicy:
    Type: AWS::IAM::Policy
    DependsOn: NodeInstanceRole
    Properties:
      PolicyName: Ec2ApiAccessPolicy
      Roles:
        - !Ref NodeInstanceRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - ec2:DescribeNetworkInterface
              - ec2:DescribeSubnets
              - ec2:ModifyInstanceAttributes
              - ec2:AssignPrivateIpAddresses
            Resources: '*'

  NodeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: eks-node-instance-profile
      Path: /
      Roles:
        -!Ref NodeInstanceRole

  NodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      Description: Security group for all nodes in cluster
      Tags:
        - Key: !Sub kubernetes.io/cluster/${ClusterName}
          Value: owned
      VpcId: !Ref VpcId
  NodeSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow node to communicate with each other
      FromPort: 0
      ToPort: 65535
      GroupId: !Ref NodeSecurityGroup
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref NodeSecurityGroup
  
  ClusterControlPlaneSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow pods to communicate with API server
      FromPort: 443
      ToPort: 443
      GroupId: !Ref ClusterControlPlaneSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref NodeSecurityGroup

  ClusterControlPlaneEgressToNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroupEgress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow the cluster control plane to communicate with worker nodes
      FromPort: 1025
      ToPort: 65535
      GroupId: !Ref ClusterControlPlaneSecurityGroup
      IpProtocol: tcp
      DestinationSecurityGroupId: !Ref NodeSecurityGroup
  
  ControlPlaneEgressToNodeSecurityGroupOn443:
    Type: AWS::EC2::SecurityGroupEgress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow the cluster control plane to communicate with pods running extension API on port 443
      FromPort: 443
      ToPort: 443
      DestinationSecurityGroupId: !Ref NodeSecurityGroup
      GroupId: !Ref ClusterControlPlaneSecurityGroup
      IpProtocol: tcp
  
  NodeSecurityGroupFromControlPlaneIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: To recieve communication from Cluster control plane to worker pods
      FromPort: 1025
      ToPort: 65535
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref ClusterControlPlaneSecurityGroup
      GroupId: !Ref NodeSecurityGroup

  NodeSecurityGroupFromControlPlaneOn443Ingress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow pods ruuning extension API servers on port 443 to recieve communication from control plane
      FromPort: 443
      ToPort: 443
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref ClusterControlPlaneSecurityGroup
      GroupId: !Ref NodeSecurityGroup

  NodeLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: 'false'
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            DeleteOnTermination: true
            VolumeSize: !Ref NodeVolumeSize
            VolumeType: gp2
      IamInstanceProfile: !Ref NodeInstanceProfile
      ImageId: !If
        - HasNodeImageId
        - !Ref NodeImageId
        - !Ref NodeImageIdSSMParam
      InstanceType: !Ref NodeInstanceType
      KeyName: !Ref KeyName
      SecurityGroups:
        - !Ref NodeSecurityGroup
      UserData: !Base64
        Fn:: Sub: |
          #!/bin/bash
          set -o xtrace
          modprobe vfio_pci
          echo 1 > /sys/module/vfio/parameters/enable_unsafe_noiommu_mode
          for ((i= ${SriovStartDevIndex} ; i<= {SriovEndDevIndex} ; i++)); do ls -al /sys/class/net/eth$i | grep device | cut -d '/' -f 9 >> /tmp/sriovPciList; done
          grep 0000 /tmp/siovPciList | while read line; do echo "echo 0 > /sys/bus/pci/devices/$line/numa_node" >> /etcrc.d/rc.local; done
          grep 0000 /tmp/siovPciList | while read line; do echo "dpdk-devbind.py -b vfio-pci $line" >> /etc/rc.d/rc.local; done
          echo"net.ipv4.conf.default.rp_filter = 0" | tee -a /etc/sysctl.conf
          echo"net.ipv4.conf.all.rp_filter = 0" | tee -a /etc/sysctl.conf
          sysctl -p
          sleep 45
          ls /sys/class/net/ > /tmp/ethList;cat /tmp/ethList | while read line; do ip link set dev "$line" up; done
          grep eth /tmp/ethList | while read line; do echo "ip link set dev "$line" up" >> /etc/rc.d/rc.local; done
          echo "done" >> /etc/rc.d/rc.local
          systemctl enable rc-local
          chmod +x /etc/rc.d/rc.local
          /etc/eks/bootstrap.sh ${ClusterName} ${BootstrapArguments{
          yum install -y
          mkdir -p /data/logs
          reboot
 NodeGroup:
    Type: AWS::AUtoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: !Ref NodeAutoSCalingGroupDesiredCapacity
      LaunchConfigurationName: !Ref NodeLaunchConfig
      MaxSize: !Ref NodeAutoScalingGroupMaxSize
      MinSize: !Ref NodeAutoScalingGroupMinSize
      Tags:
        - Key: Name
          PropogationAtLaunch: 'true'
          Value: !Sub ${ClusterName}-${NodeGroupName}-Node
        - Key: !Sub Kubernetes.io/cluster/${ClusterName}
          PropogationAtLaunch: 'true'
          Value: owned
      VPCZoneIdentifier: !Ref SUbnets
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: '1'
        MinInstancesInService: !Ref NodeAutoScalingGroupDesiredCapacity
        PauseTime: PT5M

# End of nodegroup creation

#Lifecyclehook for autoscaling group(node group)
      LchookEc2Ins:
        Type: AWS::AutoScaling::LifeCycleHook
        Properties:
          AutoScalingGroupName: !Ref NodeGroup
          LifecycleTransition: autoscaking;EC2_INSTANCE_LAUNCHING
          DefaultResult: ABANDON
          HeartbeatTimeout:'300'
      LchookEc2Term:
        Type: AWS::AutoScaling::LifecycleHook
        Properties:
        AutoScalingGroupName: !Ref NodeGroup
         LifecycleTransition: autoscaking;EC2_INSTANCE_TERMINATING
          DefaultResult: ABANDON
          HeartbeatTimeout:'300'
# Lambdacreation
RoleLambdaAttach2ndEniCfn:
  Type: AWS::IAM::Role
  Properties:
    AssumeRolePolicyDocument:
      Version: '2012-10-17'
      Statement:
        - Effect: Allow
          Principal:
            Service: lambda . amazonaws.com
          Action:
            - sts:AssumeRole
  Path: /
PolicyLambdaAttach2ndEniCfn:
  Type: AWS::IAM::Policy
  DependsOn: RoleLambdaAttach2ndEniCfn
   Properties:
     PolicyName: LambdaAttach2ndEniCfn
     Roles:
       - !Ref RoleLambdaAttach2ndEniCfn
     PolicyDocument:
     Version: '2012-10-17'
     Statement:
       - Effect: Allow
         Action:
           - ec2:CreateNetworkInterface
           - ec2:DescribeInstances
           -  ec2:DetachNetworkInterface
           - ec2:ModifyNetworkInterfaceAttribute
           - ec2:DescribeSubnets
           - autoscaling:CompleteLifecycleAction
           - ec2:DeleteTags
           - ec2:DescribeNetworkInterfaces
           - ec2:CreateTags
           - ec2:DeleteNetworkInterface
           - ec2:AttachNetworkInterfaces
           - autoscaling:DescribeAutoScalingGroups
           - ec2:TerminateInstances
        Resource: '*'
      - Effect: Allow
        Action:
          - logs:CreateLogStream
          - logs:PutLogEvents
        Resource: arn:aws:logs:*:*:*
      - Effect: Allow
        Action: logs:CreatedLogGroup
        Resource: arn:aws:logs:*:*:*

LambdaAttach2ndENI:
  Type: AWS::Lambda::Function
  Properties:
    RunTtime: python3.8
    Handler: Lambda_function.lambda_handler
    Role: !GetAtt  RoleLambdaAttach2ndEniCfn.Arn
    Code:
      S3Bucket: !Ref LambdaBucket
      S3Key: !Ref LambdaS3Key
    Timeout: '60'
    Environment:
      Variables:
        SubnetIds: !Join
          - ','
          - !Ref MultusSubnets
        SecGroupIds: !Join
          - ','
          - !Ref MultusSecurityGroupIds
# End of lambda

  # cloudwatch event trigger
  NewInstanceEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - aws.autoscaling
        detail-type:
          - EC2 Instance-launch Lifecycle Action
          - EC2 Instance-terminate Lifecycle Action
       detail:
         AutoScalingGroupName:
           - !Ref NodeGroup
      Targets:
        - Arn: !GetAtt LambdaAttach2ndENI.Arn
          Id: Lambda1
    PermissionForEventsToInvokeLambda:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: !Ref LambdaAttach2ndENI
        Action: lambda:InvokeFunction
        Principal: events.amazonaws.com
        SourceArn: !GetAtt NewInstanceEventRule.Arn
LambdaRestartFuction:
  Type: AWS::Lambda::Function
  Properties:
    Code:
      ZipFile:
        import boto3, json
        import cfnresponse
        asg_client = boto3 .client('autoscaling')
        ec2_client = boto3 .client('ec2')
        def handler (event,context):
            AutoScalingGroupName = event['ResourceProperties']['AsgName']
            asg_response = asg_client.describe_auto_scaling_groups(AutoScalingGroupName=[AutoScalingGroupName])
            instance_ids = []
            for i in asg_response['AutoScalingGroups']:
              for k in i['Instances']:
                instance_ids.append(k['InstanceId'])
            if instance_ids != []:
              ec2_client.terminate_instances(
                InstanceIds = instance_ids
                )
            responseValue = 1
            responsedata = {}
            responseData['Data"] = responseValue
            cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, "CustomResourcePhysicalId")
    
                    
 Handler: index.handler
 Runtime: python3.8
 Timeout: '60'
 Role: !GetAtt RoleLambdaAttach2ndEniCfn.Arn

CustomResource:
  Type: Custom::CustomResource
  DependsOn: NodeGroup
  Properties:
    ServiceToken: !GetAtt LambdaRestartFunction.Arn
    AsgName: !Ref NodeGroup

Outputs:
 NodeInstanceRole:
   Description: node instance role
   Value: !GetAtt NodeInstanceRole.Arn
 NodeSecurityGroup:
   Description: The security group for the node group.
   Value: !ref NodeSecurityGroup
