AWSTemplateFormatVersion: '2010-09-09'
Description: 'EKS Cluster in Singapore Region (ap-southeast-1)'

Mappings:
  ServicePrincipals:
    aws:
      ec2: ec2.amazonaws.com

Metadata:
  Author: Tanuja Padmanabhuni
  Version: 1.1
  AWS::CloudFormation::Interface:
    ParametersGroups:
      - Label:
          default: EKS Cluster
        Parameters:
          - ClusterName
          - ClusterControlPlaneSecurityGroup
      - Label:
          default: Worker Node Configuration
        Parameters:
          - NodeGroupName
          - NodeAutoScalingGroupMinSize
          - NodeAutoScalingGroupDesiredCapacity
          - NodeAutoScalingGroupMaxSize
          - NodeInstanceType
          - NodeImageIdSSMParam
          - NodeImageId
          - NodeVolumeSize
          - KeyName
          - BootstrapArguments
      - Label:
          default: Worker Node Network Configuration
        Parameters:
          - VpcId
          - Subnets
      - Label:
          default: Multus CNI Configuration
        Parameters:
          - MultusSubnets
          - MultusSecurityGroupIds
          - SriovStartDevIndex
          - SriovEndDevIndex
          - LambdaS3Bucket
          - LambdaS3Key

Parameters:
  ClusterName:
    Type: String
    Description: Name of the EKS Cluster
    Default: my-eks-cluster
  NodeAutoScalingGroupMinSize:
    Type: Number
    Default: 1
    Description: Minimum number of worker nodes in the EKS node group
  NodeAutoScalingGroupDesiredCapacity:
    Type: Number
    Default: 1
    Description: Desired number of worker nodes in the EKS node group
  NodeAutoScalingGroupMaxSize:
    Type: Number
    Default: 5
    Description: Maximum number of worker nodes in the EKS node group
  WorkerNodesInstanceType:
    Type: String
    Default: t3.medium
  KubernetesVersion:
    Type: String
    Default: 1.29
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the nodes
    Default: waker
  NodeGroupName:
    Type: String
    Description: Name of the EKS Node Group
    Default: EKS-NodeGroup
  NodeImageIdSSMParam:
    Type: String
    Description: SSM Parameter store path for EKS optimized AMI ID
    Default: /aws/service/eks/optimized-ami/1.30/amazon-linux-2/recommended/image-id
  NodeInstanceType:
    Type: String
    Description: Instance type for worker nodes
    Default: t3.medium
  NodeVolumeSize:
    Type: Number
    Description: Root volume size for worker nodes in GB
    Default: 100
  
  NodeImageID:
    Type: String
    Default: ''
    Description: Specify own custom image ID, which this value overrides AWS System Manager Parameter Store

  BootstrapArguments:
    Type: String
    Default: '--kubelet-extra-args ''--node-label=is_worker=true --topology-manager-policy=single-numa-node --cpu-manager-policy=static'''
    Description: check files/bootstrap.sh in https://github.com/awslabs/amazon-eks-ami

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC for Worker Node Instances
  
  Subnets:
    Type: CommaDelimitedList
    Description: Subnets where workers can be created
  
  ClusterControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
    Description: Security Group ID used by the EKS Control Plane

  MultusSubnet:
    Type: CommaDelimitedList
    Description: List of Subnet IDs for Multus CNI

  MultusSecurityGroup:
    Type: CommaDelimitedList
    Description: List of Security Group IDs for Multus CNI


  SriovStartDevIndex:
    Type: Number
    Description: Starting device index for SR-IOV network interfaces
    Default: 1

  SriovEndDevIndex:
    Type: Number
    Description: Ending device index for SR-IOV network interfaces
    Default: 1

  LambdaS3Bucket:
    Type: String
    Description: S3 bucket name for Lambda function code
    Default: multusaws

  LambdaS3Key:
    Type: String
    Description: S3 key for Lambda function code
    Default: attach-eni-lambda.zip
    
Resources:
  ## IAM Roles
  EksRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
  
  NodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
      Path: /

  Ec2ApiAccessPolicy:
    Type: AWS::IAM::Policy
    DependsOn: NodeInstanceRole
    Properties:
      PolicyName: Ec2ApiAccessPolicy
      Roles:
        - !Ref NodeInstanceRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - ec2:DescribeNetworkInterfaces
              - ec2:DescribeSubnets
              - ec2:ModifyInstanceAttribute
              - ec2:AssignPrivateIpAddresses
            Resource: '*'

  NodeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: eks-node-instance-profile
      Roles:
        - !Ref NodeInstanceRole

  NodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for all nodes in cluster
      Tags:
        - Key: !Sub kubernetes.io/cluster/${ClusterName}
          Value: owned
      VpcId: !Ref VpcId
  NodeSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow node to communicate with each other
      FromPort: 0
      ToPort: 65535
      IpProtocol: -1
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref NodeSecurityGroup
  
  ClusterControlPlaneSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow pods to communicate with API server
      FromPort: 443
      ToPort: 443
      GroupId: !Ref ClusterControlPlaneSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref NodeSecurityGroup

  ClusterControlPlaneEgressToNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroupEgress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow the cluster control plane to communicate with worker nodes
      FromPort: 1025
      ToPort: 65535
      GroupId: !Ref ClusterControlPlaneSecurityGroup
      IpProtocol: tcp
      DestinationSecurityGroupId: !Ref NodeSecurityGroup
  
  ControlPlaneEgressToNodeSecurityGroupOn443:
    Type: AWS::EC2::SecurityGroupEgress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow the cluster control plane to communicate with pods running extension API on port 443
      FromPort: 443
      ToPort: 443
      DestinationSecurityGroupId: !Ref NodeSecurityGroup
      GroupId: !Ref ClusterControlPlaneSecurityGroup
      IpProtocol: tcp
  
  NodeSecurityGroupFromControlPlaneIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: To recieve communication from Cluster control plane to worker pods
      FromPort: 1025
      ToPort: 65535
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref ClusterControlPlaneSecurityGroup
      GroupId: !Ref NodeSecurityGroup

  NodeSecurityGroupFromControlPlaneOn443Ingress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow pods ruuning extension API servers on port 443 to recieve communication from control plane
      FromPort: 443
      ToPort: 443
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref ClusterControlPlaneSecurityGroup
      GroupId: !Ref NodeSecurityGroup
  
  EKSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${ClusterName}-ControlPlaneSG
      VpcId: !Ref VpcId
      GroupDescription: Security group for EKS control plane
      Tags:
        - Key: Name
          Value: !Ref ClusterName

  EKSServerControlPlaneRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy

  EKSServerControlPlaneRolePolicyAttachment:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: AmazonEKSServicePolicy
      Roles:
        - !Ref EKSServerControlPlaneRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - "eks:DescribeCluster"
              - "eks:ListClusters"
            Resource: "*"

  PassRolePermission:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: EKSClusterPassRolePolicy
      Roles:
        - !Ref CloudFormationExecutionRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - iam:PassRole
            Resource:
              - arn:aws:iam::651706755820:role/EKSServerControlPlaneRole
              - arn:aws:iam::651706755820:role/NodeInstanceRole

  EKSCluster:
    Type: AWS::EKS::Cluster
    DependsOn:
      - EKSServerControlPlaneRolePolicyAttachment
    Properties:
      Name: !Ref ClusterName
      RoleArn: !GetAtt EKSServerControlPlaneRole.Arn
      ResourcesVpcConfig:
        SubnetIds: !Ref Subnets
        SecurityGroupIds:
          - !Ref EKSSecurityGroup

  EksNodeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
        - "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
        - "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
        - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
  
  # NodeLaunchTemplate:
  #   Type: AWS::EC2::LaunchTemplate
  #   Properties:
  #     LaunchTemplateName: !Sub ${ClusterName}-${NodeGroupName}-LT
  #     LaunchTemplateData:
  #       InstanceType: !Ref NodeInstanceType
  #       ImageId:
  #         Fn::Sub: "{{resolve:ssm:/aws/service/eks/optimized-ami/${KubernetesVersion}/amazon-linux-2/recommended/image-id:${AWS::Region}:latest}}"
  #       KeyName: !Ref KeyName
  #       IamInstanceProfile:
  #         Arn: !GetAtt NodeInstanceProfile.Arn
  #       BlockDeviceMappings:
  #         - DeviceName: /dev/xvda
  #           Ebs:
  #             VolumeSize: !Ref NodeVolumeSize
  #             VolumeType: gp2
  #       NetworkInterfaces:
  #         - DeviceIndex: 0
  #           Groups:
  #             - !Ref EKSSecurityGroup
  #           DeleteOnTermination: true
  #       TagSpecifications:
  #         - ResourceType: instance
  #           Tags:
  #             - Key: Name
  #               Value: !Sub ${ClusterName}-${NodeGroupName}-Node
  #             - Key: kubernetes.io/cluster/${ClusterName}
  #               Value: owned
  #         - ResourceType: volume
  #           Tags:
  #             - Key: kubernetes.io/cluster/${ClusterName}
  #               Value: owned
  #       UserData:
  #         Fn::Base64: !Sub |
  #           #!/bin/bash
  #           set -o xtrace
  #           echo "net.ipv4.conf.default.rp_filter = 0" | tee -a /etc/sysctl.conf
  #           echo "net.ipv4.conf.all.rp_filter = 0" | tee -a /etc/sysctl.conf
  #           sysctl -p
  #           sleep 45
  #           for DEV in $(ls -1 /sys/class/net | grep eth); do
  #             ip link set dev $DEV up
  #             echo "ip link set dev $DEV up" >> /etc/rc.d/rc.local
  #           done
  #           chmod +x /etc/rc.d/rc.local
  #           systemctl enable rc.local
  #           /etc/eks/bootstrap.sh "${ClusterName}" "${BootstrapArguments}"
  #           yum install -y
  #           mkdir -p /data/logs
  #           reboot

  # NodeAutoScalingGroup:
  #   Type: AWS::AutoScaling::AutoScalingGroup
  #   Properties:
  #     DesiredCapacity: !Ref NodeAutoScalingGroupDesiredCapacity
  #     MinSize: !Ref NodeAutoScalingGroupMinSize
  #     MaxSize: !Ref NodeAutoScalingGroupMaxSize
  #     VPCZoneIdentifier: !Ref Subnets
  #     LaunchTemplate:
  #       LaunchTemplateId: !Ref NodeLaunchTemplate
  #       Version: !GetAtt NodeLaunchTemplate.LatestVersionNumber
  #     Tags:
  #       - Key: Name
  #         Value: !Sub ${ClusterName}-${NodeGroupName}-Node
  #         PropagateAtLaunch: true
  #       - Key: !Sub kubernetes.io/cluster/${ClusterName}
  #         Value: owned
  #         PropagateAtLaunch: true
  #   UpdatePolicy:
  #     AutoScalingRollingUpdate:
  #       MaxBatchSize: 1
  #       MinInstancesInService: !Ref NodeAutoScalingGroupDesiredCapacity
  #       PauseTime: PT5M



  
    